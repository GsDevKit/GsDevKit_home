name: Upgrade Tests

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        gs_version: [ 3.1.0.6, 3.2.17, 3.3.9, 3.4.5, 3.5.5, 3.6.1 ]
        allowfailure: [ false ]
        test: [ Upgrade_unittest ]
        exclude:
          - gs_version: 3.2.17
            test: Upgrade_unittest
            allowfailure: false
        include:
          # include the upgrade_from parameter in the matrix
          - gs_version: 3.4.5
            upgrade_from: 3.3.9
            allowfailure: false
          - gs_version: 3.1.0.6
            upgrade_from: 2.4.4.1
            allowfailure: false
          - gs_version: 3.2.17
            upgrade_from: 3.2.9
            allowfailure: true
          - gs_version: 3.4.5
            upgrade_from: 3.1.0.6
            allowfailure: false
          - gs_version: 3.3.9
            upgrade_from: 3.2.17
            allowfailure: false
          - gs_version: 3.4.5
            upgrade_from: 3.3.3
            allowfailure: false
          - gs_version: 3.5.5
            upgrade_from: 3.4.5
            allowfailure: false
          - gs_version: 3.5.5
            upgrade_from: 3.2.17
            allowfailure: false
          - gs_version: 3.6.1
            upgrade_from: 3.3.9
            allowfailure: false
          - gs_version: 3.6.1
            upgrade_from: 3.4.5
            allowfailure: false
          - gs_version: 3.6.1
            upgrade_from: 3.5.0
            allowfailure: false
          # additional upgrade tests
          - gs_version: 3.5.1
            upgrade_from: 3.3.9
            test: Upgrade_unittest
            allowfailure: false
          - gs_version: 3.6.1
            upgrade_from: 3.4.5
            test: Upgrade_User
            allowfailure: false
          - gs_version: 3.6.1
            upgrade_from: 3.3.9
            test: Upgrade_71
            allowfailure: false
          - gs_version: 3.6.1
            upgrade_from: 3.3.9
            test: Upgrade_TOC
            allowfailure: false
    env:
      GS_VERSION: ${{ matrix.gs_version }}
      TEST: ${{ matrix.test }}
      UPGRADE_FROM: ${{ matrix.upgrade_from }}
    continue-on-error: ${{ matrix.allowfailure }}
    name: ${{ matrix.gs_version }} - ${{ matrix.test }} - ${{ matrix.upgrade_from }}
    steps:
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%dT%H:%M:%S')"
      - name: Log date
        run: echo "${{ steps.date.outputs.date }}"
      - name: Set default run status
        run: echo "::set-output name=last_run_status::default" > last_run_status
      - name: Restore last run status
        id: last_run
        uses: actions/cache@v2
        with:
          path: |
            last_run_status
          key: ${{ github.run_id }}-${{ matrix.gs_version }}-${{ matrix.test }}-${{ matrix.upgrade_from }}-${{ steps.date.outputs.date }}
          restore-keys: |
            ${{ github.run_id }}-${{ matrix.gs_version }}-${{ matrix.test }}-${{ matrix.upgrade_from }}-
      - name: Set last run status
        id: last_run_status
        run: cat last_run_status
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.workflow_dispatch.ref }}
      - name: Run tests
        id: test_run
        if: steps.last_run_status.outputs.last_run_status != 'success'
        run: |
          export GS_HOME="$(pwd)"
          export PATH=$GS_HOME/bin:$PATH
          export GS_TRAVIS=true
          hostname
          cat /etc/hosts
          $GITHUB_WORKSPACE/tests/testTravisCI.sh
        shell: bash
      - name: Save run status
        if: steps.last_run_status.outputs.last_run_status != 'success'
        run: echo "::set-output name=last_run_status::${{ steps.test_run.outcome }}" > last_run_status