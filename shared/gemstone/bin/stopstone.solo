#!/usr/bin/env superdoit_solo
instvars
	stoneName
%
usage
-----
USAGE: $basename [-h] <stone-name>

DESCRIPTION
Stop the stone repository monitor process for the given stone.

OPTIONS
  -h, --help 	display usage message

EXAMPLES
  $basename -h
  $basename myStoneName
-----
%
projectshome
$GS_HOME/shared/gemstone/repos
%
specs
[
RwLoadSpecificationV2 {
	#specName : 'GsDevKit_SuperDoit',
	#projectName : 'GsDevKit_SuperDoit',
	#diskUrl : 'file:$GS_HOME/shared/gemstone/repos/GsDevKit_SuperDoit',
	#projectSpecFile : 'rowan/project.ston',
	#componentNames : [
		'GsDevKit'
	],
	#comment : 'loads GsDevKit support code in support of GsDevKit_home superDoit scripts'
}
]
%
method
stopStone
	| result tempenvvalue |
	(self positionalArgs size < 1 or: [ self positionalArgs size > 2 ])
		ifTrue: [
			^ Error signal: 'Wrong number of arguments (' , self positionalArgs size printString , ')' ].
	self shouldNotBeForeignStone.
	tempenvvalue := System gemEnvironmentVariable: 'GEMSTONE'.
	(System gemEnvironmentVariable: 'TARGET_GEMSTONE')
		ifNil: [ System gemEnvironmentVariable: 'GEMSTONE' put: (self gs_stoneDirectory / 'product') pathString ]
		ifNotNil: [:target | System gemEnvironmentVariable: 'GEMSTONE' put: target ].
	"TEMPORARILY PATCHED WITH ERROR HANDLER TO HANDLE NON-ZERO EXIT STATUS"
	[ result := GsHostProcess execute: self stopStoneCommand ] on: Error do:[:e | result := 'non-zero exit status!' ].
	System gemEnvironmentVariable: 'GEMSTONE' put: tempenvvalue.
	self stderr nextPutAll: result.
%
method
stopStoneCommand
	| topaziniDict |
	topaziniDict := self topaziniDict.
	^ String streamContents: [ :stream |
		stream
			nextPutAll: (self gs_binDirectory / 'stopstone ') fullPath asString;
			nextPut: Character space;
			nextPutAll: self stoneName;
			nextPut: Character space;
			nextPutAll: (topaziniDict at: 'user');
			nextPut: Character space;
			nextPutAll: (topaziniDict at: 'password')
	]
%
method
shouldNotBeForeignStone
	self stoneInfo isForeignStone
		ifTrue: [
			^ Error signal:
					'The stone ' , self stoneName printString , ' is a foreign stone and should not be controlled from GsDevKit_home.' ].
%
method
gs_binDirectory
	^ (self gs_stoneDirectory / 'product' / 'bin') asFileReference
%
method
gs_stonesDirectory
	^  ((System gemEnvironmentVariable: 'GS_HOME'), '/server/stones') asFileReference
%
method
gs_stoneDirectory
	^  self gs_stonesDirectory / self stoneName
%
method
stoneName
	stoneName ifNil: [ stoneName := self positionalArgs at: 1 ].
	^ stoneName
%
method
stoneInfoClass
	^ (self globalNamed: 'GsDevKitStoneInfo')
%
method
stoneInfoFilename
	^  'info.ston'
%
method
stoneInfo
	^ self stoneInfoClass importFrom: self gs_stoneDirectory / self stoneInfoFilename
%
method
topaziniFile
	^self gs_stoneDirectory / '.topazini'
%
method
topaziniDict
	| dict topaziniData index|
	dict := Dictionary new.
	topaziniData := self topaziniFile contents.
	dict at: 'user' put: (topaziniData
		copyFrom: (index := topaziniData indexOfSubCollection: 'user') + 5
		to: (topaziniData indexOf: Character lf startingAt: index) - 1).
	dict at: 'password' put: (topaziniData
		copyFrom: (index := topaziniData indexOfSubCollection: 'password') + 9
		to: (topaziniData indexOf: Character lf startingAt: index) - 1).
	^ dict
%
method
doit
	"override doit method, because ChildError does not exist in 3.6.0"
	[
		self getAndVerifyOptions == self noResult
			ifTrue: [ ^ self noResult ].
		^self theDoit
	] on: Error do: [:ex |
		self debug ifTrue: [ ex pass ].
		self
			exit: ((ex respondsTo: #stderr)
				ifTrue: [ ex stderr asString trimBoth ]
				ifFalse: [ ex messageText ])
			withStatus: 1 "does not return" ].
%
doit
	self preDoitSpecLoad.	"load the GsDevKit_SuperDoit project from spec"
	self stopStone.
	^ self noResult
%
