#!/usr/bin/env superdoit_solo
instvars
%
usage
-----
USAGE: $basename [-h] <stone-name>

DESCRIPTION
Stop the netldi process for the given stone.

OPTIONS
  -h, --help 	display usage message

EXAMPLES
  $basename -h
  $basename myStoneName
-----
%
projectshome
$GS_HOME/shared/gemstone/repos
%
specs
[
RwLoadSpecificationV2 {
	#specName : 'GsDevKit_SuperDoit',
	#projectName : 'GsDevKit_SuperDoit',
	#diskUrl : 'file:$GS_HOME/shared/gemstone/repos/GsDevKit_SuperDoit',
	#projectSpecFile : 'rowan/project.ston',
	#componentNames : [
		'GsDevKit'
	],
	#comment : 'loads GsDevKit support code in support of GsDevKit_home superDoit scripts'
}
]
%
method
stopNetldi
	| sess stoneInfo netldiArgs result tempenvvalue |
	(self positionalArgs size < 1)
		ifTrue: [
			^ Error signal: 'Wrong number of arguments (' , self positionalArgs size printString , ')' ].
	self shouldNotBeForeignStone.
	sess := self sessionDescriptionIfAbsent: [ :ignored |  ].
	stoneInfo := self stoneInfo.
	netldiArgs := sess ifNil: [ stoneInfo netLDI ] ifNotNil: [ sess netLDI ].
	tempenvvalue := System gemEnvironmentVariable: 'GEMSTONE'.
	System gemEnvironmentVariable: 'GEMSTONE' put: (System gemEnvironmentVariable: 'TARGET_GEMSTONE').
	"TEMPORARILY PATCHED WITH ERROR HANDLER TO HANDLE NON-ZERO EXIT STATUS"
	[ result := GsHostProcess execute: (self gs_binDirectory / 'stopnetldi ') fullPath asString, ' ', netldiArgs. ] on: Error do:[:e | result := 'non-zero exit status!' ].
	System gemEnvironmentVariable: 'GEMSTONE' put: tempenvvalue.
	self stderr nextPutAll: result
%
method
shouldNotBeForeignStone
	self stoneInfo isForeignStone
		ifTrue: [
			^ Error signal:
					'The stone ' , self stoneName printString , ' is a foreign stone and should not be controlled from GsDevKit_home.' ].
%
method
sessionDescription
	^ self
		sessionDescriptionIfAbsent: [ :sessionDescriptionReference |
			Error signal:
					'Session description file ' , sessionDescriptionReference pathString printString , ' for ' , self stoneName printString
						, ' not found.' ]
%
method
sessionDescriptionIfAbsent: absentBlock
	^self sessionDescriptionFor: self stoneName ifAbsent: absentBlock
%
method
sessionDescriptionFor: aStoneName ifAbsent: absentBlock
	| sessionDescriptionReference |
	sessionDescriptionReference := self sessionDescriptionHome / aStoneName.
	sessionDescriptionReference exists
		ifFalse: [ ^ absentBlock value: sessionDescriptionReference ].
	^ (self globalNamed: 'TDSessionDescription') importFrom: sessionDescriptionReference pathString
%
method
sessionDescriptionHome
	^ (System gemEnvironmentVariable: 'GS_SYS_SESSIONS') asFileReference
%
method
gs_binDirectory
	^ (self gs_stoneDirectory / 'product' / 'bin') asFileReference
%
method
gs_stonesDirectory
	^  ((System gemEnvironmentVariable: 'GS_HOME'), '/server/stones') asFileReference
%
method
gs_stoneDirectory
	^  self gs_stonesDirectory / self stoneName
%
method
stoneInfoClass
	^ (self globalNamed: 'GsDevKitStoneInfo')
%
method
stoneInfoFilename
	^  'info.ston'
%
method
stoneInfo
	^ self stoneInfoClass importFrom: self gs_stoneDirectory / self stoneInfoFilename
%
method
stoneName
	^ self positionalArgs at: 1
%
method
doit
	"override doit method, because ChildError does not exist in 3.6.0" 
	[
		self getAndVerifyOptions == self noResult
			ifTrue: [ ^ self noResult ].
		^ self theDoit
	] on: Error do: [:ex |
		self debug ifTrue: [ ex pass ].
		self
			exit: ((ex respondsTo: #stderr)
				ifTrue: [ ex stderr asString trimBoth ]
				ifFalse: [ ex messageText ])
			withStatus: 1 "does not return" ].
%
doit
	self preDoitSpecLoad.	"load the GsDevKit_SuperDoit project from spec"
	self stopNetldi.
	^ self noResult
%
