#! /usr/bin/env bash
#=========================================================================
# Copyright (c) 2015, 2016 GemTalk Systems, LLC <dhenrich@gemtalksystems.com>.
#
#   MIT license: https://github.com/GsDevKit/GsDevKit_home/blob/master/license.txt
#=========================================================================

theArgs="$*"
source "${GS_HOME}/bin/private/shFeedback"
start_banner

usage() {
  cat <<HELP
USAGE: $(basename $0) [-h] [-f] [-v Pharo3.0 | Pharo4.0 ]
                      -d <full-path-to-directory>
		      gsDevKitCommandLine|gsDevKitTodeCommandLine

Create a gsDevKit image of the given type (gsDevKitCommand or todeCommand). 
Used for standard GsDevKit tasks that do not require tODE to be installed.

If the gsServer image already exists, the installation is skipped
unless the -f option is specified.

OPTIONS
  -h 
     display help
  -d <full-path-to-directory>
     <full-path-to-directory> specifies the directory into which the chosen
     pharo version is downloaded
  -f
     Force gsServer image installation, whether or not the image
     already exists.
  -v Pharo3.0 | Pharo4.0
     Choose the version of Pharo to use for the client. Default is Pharo3.0.

EXAMPLES
  $(basename $0) -h
  $(basename $0) -d \$GS_SERVER_PHARO
  $(basename $0) -v Pharo3.0 -d \$GS_SERVER_PHARO
  $(basename $0) -f -d \$GS_SERVER_PHARO

HELP
}

if [ "${GS_HOME}x" = "x" ] ; then
  exit_1_banner "the GS_HOME environment variable needs to be defined"
fi
source "${GS_HOME}/bin/defGsDevKit.env"
source "${GS_HOME}/bin/private/winRunPharoFunctions"

force=""
version="Pharo3.0"
directoryPath=""
while getopts "d:fhv:" OPT ; do
  case "$OPT" in
    h) usage; exit 0;;
    f) force="true";;
    d) directoryPath="${OPTARG}";;
    v) version="${OPTARG}";;
    *) usage; exit_1_banner "Unknown option";;
  esac
done
shift $(($OPTIND - 1))

if [ $# -ne 1 ]; then
  usage; exit_1_banner "Missing required argument"
fi
imageType=$1
shift 1

if [ "${directoryPath}x" = "x" ] ; then
  usage; exit_1_banner "required argument -d missing"
fi

if [ ! -e "${directoryPath}/pharo" ] ; then 
  "$GS_HOME/bin/private/downloadSmalltalkClient" -v $version -d "$directoryPath"
fi

# Detect operating system
PLATFORM="`uname -sm | tr ' ' '-'`"

pharoCmd="$directoryPath/pharo"
case "$imageType" in
  gsDevKitCommandLine)
    initialImageName=Pharo.image
    imageBaseName=gsDevKitCommandLine
    case "$PLATFORM" in
      MINGW32_NT*)
        pharoCmd="win_run_pharo $directoryPath --headless"
        gs_serverLoadPath="$GS_SYS_DEFAULT/pharo/windows/gsDevKitCommandLineLoad.st"
        if [ -e "$GS_SYS_LOCAL/pharo/gsDevKitCommandLineLoad.st" ] ; then
          gs_serverLoadPath="$GS_SYS_LOCAL/pharo/windows/gsDevKitCommandLineLoad.st"
        fi
        ;;
      *)
        gs_serverLoadPath="$GS_SYS_DEFAULT/pharo/gsDevKitCommandLineLoad.st"
        if [ -e "$GS_SYS_LOCAL/pharo/gsDevKitCommandLineLoad.st" ] ; then
          gs_serverLoadPath="$GS_SYS_LOCAL/pharo/gsDevKitCommandLineLoad.st"
        fi
        ;;
    esac
  ;;
  gsDevKitTodeCommandLine)
    if [ ! -e "$directoryPath/gsDevKitCommandLine.image" ] ; then
      "$GS_SERVER/bin/create_gs_server_image" -d "$directoryPath" gsDevKitCommandLine
    fi
    initialImageName=gsDevKitCommandLine.image
    imageBaseName=gsDevKitTodeCommandLine
    case "$PLATFORM" in
      MINGW32_NT*) 
        usage; exit_1_banner"gsDevKitTodeCommandLine not applicable for a windows installation"
        ;;
      *)
        gs_serverLoadPath="$GS_SYS_DEFAULT/pharo/gsDevKitTodeCommandLineLoad.st"
        if [ -e "$GS_SYS_LOCAL/pharo/gsDevKitTodeCommandLineLoad.st" ] ; then
          gs_serverLoadPath="$GS_SYS_LOCAL/pharo/gsDevKitTodeCommandLineLoad.st"
        fi
        ;;
    esac
  ;;
  *) usage; exit_1_banner "Unknown image type";;
esac
imageName=${imageBaseName}.image

message="create"
if [ -e "$directoryPath/$imageName" ] ; then
  if [ "${force}x" = "x" ] ; then
    exit_0_banner "$imageName image already created, use -f to force update"
  else
    message="update"
  fi
fi

echo "${message} $imageName image using $gs_serverLoadPath"

if [ "${force}" = "true" ] ; then
  "$pharoCmd" "$directoryPath/$imageName" save gsDevKitTmp
else
  "$pharoCmd" "$directoryPath/$initialImageName" save gsDevKitTmp
fi

"$pharoCmd" "$directoryPath/gsDevKitTmp.image" st --quit --save "$gs_serverLoadPath"

"$pharoCmd" "$directoryPath/gsDevKitTmp.image" save $imageBaseName
echo ""

rm -f "$directoryPath/gsDevKitTmp.*" "$directoryPath/*.zip"

"$GS_HOME/bin/private/scanProductsForInstallingGciLibs" "$directoryPath"

exit_0_banner "...finished"
