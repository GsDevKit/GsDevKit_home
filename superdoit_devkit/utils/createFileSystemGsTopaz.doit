#!/usr/bin/env superdoit_solo_devkit
options
{
  SuperDoitCommandLineOption long: 'help' short: 'h'.
  SuperDoitCommandLineOption long: 'debug' short: 'D'.
  SuperDoitRequiredCommandLineOption long: 'import'.
  SuperDoitRequiredCommandLineOption long: 'version'.
  SuperDoitOptionalCommandLineOption long: 'gsdir' default: '.'.
}
%
usage
-----
USAGE $basename [--help | -h] [--debug | -D] \
      --import=<import-load-spec-url> --version=<gemstone-version> \
      gsdir=<.gs-file-directory>

DESCRIPTION
  Read the FileSystemGs packages from a Rowan:masterV2.1 checkout and create a
    .gs file for the given GemStone version.

OPTIONS
  -h, --help                 display usage message
  -D, --debug                bring up topaz debugger in the event of a script error
  --import=<import-load-spec-url>
                             file url referencing the load spec for the project
                             used as the source for the FileSystem code
  --version=<gemstone-version>
                             pick from 3.2.15, 3.5.0, 3.6.0, 3.6.1 and 3.7.0
  --gsdir=<.gs-file-directory>
                             directory where the single .gs file will be written

EXAMPLES
  $basename --help
  $basename -h
  $basename --debug
  $basename -D
  $basename --import=file:$GS_HOME/shared/repos/Rowan/platforms/gemstone/projects/FileSystemGs/rowan/specsV2/FileSystemGs.ston \
            --version=3.5.0
-----
%
method
getAndVerifyOptions
		self getOpts: self optionSpecs.
		self help ifTrue: [ ^ self usage ].
		self import ifNil: [ self error: 'Missing required option --import' ]. 
		self version ifNil: [ self error: 'Missing required option --version' ]. 
%
method
readSpecFrom: specUrl
	^ RwSpecification fromUrl: specUrl
%
method
doImportExport
	| attributes importSpec importProject gsDir topazFileNameMap 
		projectSetDefinition projectSetModification visitor header |
	attributes :=  Rowan platformConditionalAttributes, {self version asRwGemStoneVersionNumber . 'tests'}.
	importSpec := self readSpecFrom: self import.
	importProject := importSpec resolve read: attributes.

	gsDir :=  self dirname / self gsdir.

  topazFileNameMap := Dictionary new
		at: 'FileSystemGs_', (self version copyWithout: $.) 
			put: importProject packageNames;
		yourself.
	projectSetDefinition := RwProjectSetDefinition new 
		addProject: importProject;
		yourself.
	projectSetModification := projectSetDefinition
		compareAgainstBase: RwProjectSetDefinition new.
	header := (WriteStream on: String new)
		nextPutAll: '! FileSysteGs fileout for ', 
			importProject name , 
			' [', importProject commitId, '] ', 
			DateAndTime now printString;
		lf; 
		contents.
	visitor := GsModificationTopazWriterVisitor new
		repositoryRootPath: gsDir;
		topazFileHeader: header;
		topazFilenamePackageNamesMap: topazFileNameMap;
		yourself.
	visitor visit: projectSetModification.
%
doit
	[
		self getAndVerifyOptions == self noResult
			ifTrue: [ ^ self noResult ].
		self doImportExport.
	] on: Error do: [:ex | 
		self debug ifTrue: [ ex pass ].
		self exit: ex messageText withStatus: 1 "does not return" ].
	true
%
