#!/usr/bin/env superdoit_solo_devkit
instvars
%
options
{
	SuperDoitCommandLineOption long: 'help' short: 'h'.
	SuperDoitCommandLineOption long: 'debug'.
}
%
usage
-----
USAGE: startNetldi [-h] <stone-name> [<startnetldi-commandLine-args>]

DESCRIPTION
Stop the netldi process for the given stone.

OPTIONS
  -h, --help 	display usage message

EXAMPLES
  $basename -h
  $basename myStoneName
-----
%
method
stopNetldi
	| sess stoneInfo netldiArgs result |
	(self positionalArgs size < 1)
		ifTrue: [
			^ Error signal: 'Wrong number of arguments (' , self positionalArgs size printString , ')' ].
	self shouldNotBeForeignStone.
	sess := self sessionDescriptionIfAbsent: [ :ignored |  ].
	stoneInfo := self stoneInfo.
	netldiArgs := sess ifNil: [ stoneInfo netLDI ] ifNotNil: [ sess netLDI ].
	result := GsHostProcess execute: (self gs_binDirectory / 'stopnetldi ') fullPath asString, ' ', netldiArgs.
	self stderr nextPutAll: result
%
method
shouldNotBeForeignStone
	self stoneInfo isForeignStone
		ifTrue: [
			^ Error signal:
					'The stone ' , self stoneName printString , ' is a foreign stone and should not be controlled from GsDevKit_home.' ].
%
method
sessionDescription
	^ self
		sessionDescriptionIfAbsent: [ :sessionDescriptionReference |
			Error signal:
					'Session description file ' , sessionDescriptionReference pathString printString , ' for ' , self stoneName printString
						, ' not found.' ]
%
method
sessionDescriptionIfAbsent: absentBlock
	^self sessionDescriptionFor: self stoneName ifAbsent: absentBlock
%
method
sessionDescriptionFor: aStoneName ifAbsent: absentBlock
	| sessionDescriptionReference |
	sessionDescriptionReference := self sessionDescriptionHome / aStoneName.
	sessionDescriptionReference exists
		ifFalse: [ ^ absentBlock value: sessionDescriptionReference ].
	^ TDSessionDescription importFrom: sessionDescriptionReference pathString
%
method
sessionDescriptionHome
	^ (System gemEnvironmentVariable: 'GS_SYS_SESSIONS') asFileReference
%
method
gs_binDirectory
	^ ((System gemEnvironmentVariable: 'GEMSTONE'), '/bin') asFileReference
%
method
gs_stonesDirectory
	^  ((System gemEnvironmentVariable: 'GS_HOME'), '/server/stones') asFileReference
%
method
gs_stoneDirectory
	^  self gs_stonesDirectory / self stoneName
%
method
stoneInfoClass
	^ GsDevKitStoneInfo
%
method
stoneInfoFilename
	^  'info.ston'
%
method
stoneInfo
	^ self stoneInfoClass importFrom: self gs_stoneDirectory / self stoneInfoFilename
%
method
stoneName
	^ self positionalArgs at: 1
%
method
getAndVerifyOptions
	self getOpts: self optionSpecs.
	self help ifTrue: [ ^ self usage ].
%
doit
	[
		self getAndVerifyOptions == self noResult
			ifTrue: [ ^ self noResult ].
		self stopNetldi.
		^ self noResult
	] on: Error do: [:ex |
		self debug ifTrue: [ ex pass ].
		self
			exit: ((ex respondsTo: #stderr)
				ifTrue: [ ex stderr asString trimBoth ]
				ifFalse: [ ex messageText ])
			withStatus: 1 "does not return" ].
%
