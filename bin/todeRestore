#! /usr/bin/env bash
#=========================================================================
# Copyright (c) 2014, 2015, 2016 GemTalk Systems, LLC <dhenrich@gemtalksystems.com>.
#
#   MIT license: https://github.com/GsDevKit/GsDevKit_home/blob/master/license.txt
#=========================================================================

theArgs="$*"
source "${GS_HOME}/bin/private/shFeedback"
start_banner

usage() {
  cat <<HELP
USAGE: $(basename $0) [-h] [-i] <stone-name> <backup-file>

Restore a backup for the given stone.

tODE needs to be installed in the stone.

OPTIONS
  -h display help
  -i launch command line image for interactive debugging

EXAMPLES
  $(basename $0) -h
  $(basename $0) gs_329 home.dbf

HELP
}

PLATFORM="`uname -sm | tr ' ' '-'`"
if [[ "$PLATFORM" == MINGW32_NT* || "$PLATFORM" == MSYS_NT* ]] ; then
  exit_1_banner "This script is a server-only script and cannot be used on Windows"
fi

if [ "${GS_HOME}x" = "x" ] ; then
  exit_1_banner "the GS_HOME environment variable needs to be defined"
fi
source "${GS_HOME}/bin/defGsDevKit.env"
if [ "${GS_SERVER}x" = "x" ] ; then
  exit_1_banner "the GS_SERVER environment variable needs to be defined. Perhaps a stone has not been created yet?"
fi

interactiveArg=""
while getopts "hi" OPT ; do
  case "$OPT" in
    h) usage; exit 0;;
    i) interactiveArg=" -D ";;
    *) usage; exit_1_banner "Unknown option";;
  esac
done
shift $(($OPTIND - 1))

if [ $# -ne 2 ]; then
  usage; exit_1_banner "Missing required arguments (2)"
fi
stoneName=$1
backupFile="$2"

stonePath="$GS_SERVER_STONES/$stoneName"
if [ ! -d "$stonePath" ] ; then
  exit_1_banner "The stone $stoneName does not exist"
fi

echo "Restoring backup for stone: $stoneName using: $backupFile"

# set up stone environment
pushd "$stonePath" >& /dev/null
  source "$stonePath/stone.env"
popd >& /dev/null

# do tODE restore
#"$GS_HOME/bin/private/gsDevKitTodeCommandLine" $interactiveArg restoreFromBackup $stoneName "$backupFile"
"$GS_HOME/shared/gemstone/bin/restorefrombackup.solo" $interactiveArg $stoneName "$backupFile"

exit_0_banner "...finished"
