#! /usr/bin/env bash
#=========================================================================
# Copyright (c) 2014, 2015, 2016 GemTalk Systems, LLC <dhenrich@gemtalksystems.com>.
#
#   MIT license: https://github.com/GsDevKit/GsDevKit_home/blob/master/license.txt
#=========================================================================

theArgs="$*"
source "${GS_HOME}/bin/private/shFeedback"

usage() {
  cat <<HELP
USAGE: $(basename $0) [-h] -f -d <directory-path> -t gemtools|pharo|pharo64|jade <gemstone-version>

Copy the gci libraries for the given GemStone version into the given directory for the 
given type of client.

OPTIONS
  -h display help
  -d <directory-path>
     Directory path to a pharo installation
  -f force copying of gci files if they already exist

EXAMPLES
   $(basename $0) -h
   $(basename $0) -d \$GS_CLIENT_DEV -t pharo 3.2.9
   $(basename $0) -f -d \$GS_CLIENT_DEV -t pharo 3.2.9
   $(basename $0) -f -d \$GS_CLIENT_DEV -t pharo64 3.2.9

HELP
}

if [ "${GS_HOME}x" = "x" ] ; then
  exit_1_banner "the GS_HOME environment variable needs to be defined"
fi
if [ "${GS_SHARED_DOWNLOADS}x" = "x" ] ; then
  source "${GS_HOME}/bin/defGsDevKit.env"
fi

directoryPath=""
clientType=""
force="false"
while getopts "d:fht:" OPT ; do
  case "$OPT" in
    h) usage; exit 0;;
    d) directoryPath="${OPTARG}";;
    f) force="true";;
    t) clientType="${OPTARG}";;
    *) usage; exit_1_banner "Uknown option";;
  esac
done
shift $(($OPTIND - 1))

if [ $# -ne 1 ]; then
  usage; exit_1_banner "Missing required positional parameter"
fi
vers="$1"

if [ "${directoryPath}x" = "x" ] ; then
  usage; exit_1_banner "missing required option -d"
fi

# Detect operating system
PLATFORM="`uname -sm | tr ' ' '-'`"
# Macs with Core i7 use the same software as older Macs
[ $PLATFORM = "Darwin-x86_64" ] && PLATFORM="Darwin-i386"

case "$PLATFORM" in
  Linux-x86_64) 
		gsvers="GemStone64Bit${vers}-x86_64.Linux"; libext="so" ;;
  Darwin-i386) 
		gsvers="GemStone64Bit${vers}-i386.Darwin"; libext="dylib" ;;
  MSYS_NT*|MINGW32_NT*|MINGW64_NT*) 	
	if  [ "$vers" \< "3.3.0"  ] ;  then 
			 gsvers="GemBuilderC${vers}-x86.Windows_NT"
		else
		 	gsvers="GemStone64BitClient${vers}-x86.Windows_NT"
	fi
		libext="dll" ;;
esac
gs_product="$GS_SHARED_DOWNLOADS/products/$gsvers"

case "$clientType" in
  gemtools) ;;
  jade) ;;
  pharo*)
	 	if [ "$clientType" = "pharo64" ] ; then
			sourceLocation="$gs_product/lib"
		else
    	sourceLocation="$gs_product/lib32"
		fi
    case "$PLATFORM" in
      Linux-x86_64)
				targetLocation="${directoryPath}/pharo-vm"
				if [ -d "${targetLocation}/lib/pharo" ] ; then
					targetLocation="${targetLocation}/lib/pharo/5.0*"
					targetLocation=`echo $targetLocation`
				fi
			 	;;
      Darwin-i386) targetLocation="${directoryPath}/pharo-vm/Pharo.app/Contents/MacOS/Plugins" ;;
      MSYS_NT*|MINGW32_NT*|MINGW64_NT*)
        case "$vers" in
          2.4.*|3.0.*|3.1.*) sourceLocation="${gs_product}/bin" ;;
          *) sourceLocation="${gs_product}/bin32" ;;
        esac
        targetLocation="${directoryPath}"
        if [ ! -e "$targetLocation/msvcr*.dll" ] ; then
          cp "${sourceLocation}/msvcr*" $targetLocation
        else
          echo "[Warning]  ${sourceLocation}/msvcrXXX.dll already present to replace, delete and try again"
        fi
        ;;
    esac
    ;;
  *) usage; exit_1_banner "uknown client type: $clientType";;
esac

copyFiles="true"
if [ -e "$targetLocation/libgcirpc-${vers}-32.${libext}" ] ; then
  if [ "$force" = "true" ]; then
    copyFiles="true"
  else
    copyFiles="false"
  fi
fi

if [ "$copyFiles" = "true" ] ; then
        case "$vers" in
          2.4.*)
             pushd "$sourceLocation" >& /dev/null
               for libName in $(find ./libgcirpc64* -type f)
               do
                 targetName=`echo "$libName" | cut -c 3- | cut -f1 -d'.'`
                 cp -rf $libName "$targetLocation/${targetName}.${libext}"
               done
             popd >& /dev/null 
            ;;
          *) cp -rf "${sourceLocation}/"lib*.${libext} "$targetLocation" ;;
        esac
else
  echo "[Warning] gci libraries already present in $targetLocation. To replace, delete them and try again"
fi
