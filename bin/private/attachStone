#! /usr/bin/env bash
#=========================================================================
# Copyright (c) 2015, 2016 GemTalk Systems, LLC <dhenrich@gemtalksystems.com>.
#
#   MIT license: https://github.com/GsDevKit/GsDevKit_home/blob/master/license.txt
#=========================================================================

theArgs="$*"
source "${GS_HOME}/bin/private/shFeedback"
start_banner

usage() {
  cat <<HELP
USAGE: $(basename $0) [-h] [-t] [ -f | -d <dev-GS_HOME-path> | -m <master-GS_HOME-path ] 
                      [-o <old-stone-name] <stone-name> <gemstone-version>

OPTIONS
  -h
     display help
EXAMPLES
  $(basename $0) -h
  $(basename $0) -d /export/foos1/users/dhenrich/gsDevKitHome seaside 3.2.2
  $(basename $0) -m /export/foos1/users/dhenrich/old_gsDevKitHome gs_3106 3.1.0.6
  $(basename $0) -o gs_3106 -m /export/foos1/users/dhenrich/old_gsDevKitHome gso_3106 3.1.0.6
  $(basename $0) -f gs_3106 3.1.0.6

HELP
}

PLATFORM="`uname -sm | tr ' ' '-'`"
if [[ "$PLATFORM" == MINGW32_NT* || "$PLATFORM" == MSYS_NT* ]] ; then
  exit_1_banner "This script is a server-only script and cannot be used on Windows"
fi

if [ "${GS_HOME}x" = "x" ] ; then
  exit_1_banner "the GS_HOME environment variable needs to be defined"
fi
source "${GS_HOME}/bin/defGsDevKit.env"

master_GS_HOME="false"
dev_GS_HOME="false"
foreign="false"
oldStonePath=""
todeInstalled="false"
while getopts "hfd:m:o:t" OPT ; do
  case "$OPT" in
    h) usage; exit 0;;
    f) 
      if [ "${oldGsDevKitHome}x" != "x" ] ; then
        usage; exit_1_banner "Only one of -f, -m or -d options may be used"
      fi
      oldGsDevKitHome="XXX"
      foreign="true"
      ;;
    d) 
      if [ "${oldGsDevKitHome}x" != "x" ] ; then
        usage; exit_1_banner "Only one of -f, -m or -d options may be used"
      fi
      oldGsDevKitHome="${OPTARG}"
      dev_GS_HOME="true"
      ;;
    m) 
      if [ "${oldGsDevKitHome}x" != "x" ] ; then
        usage; exit_1_banner "Only one of -f, -m or -d options may be used"
      fi
      oldGsDevKitHome="${OPTARG}"
      master_GS_HOME="true"
      ;;
    o) oldStoneName="${OPTARG}";;
    t) todeInstalled="true";;
    *) usage; exit_1_banner "Uknown option";;
  esac
done
shift $(($OPTIND - 1))

if [ $# -ne 2 ]; then
  usage; exit_1_banner "Two positional arguments expected"
fi
stoneName=$1
vers=$2
if [ "${oldStoneName}x" = "x" ] ; then 
  oldStoneName=$stoneName
fi

if [ "${GS_SERVER}x" = "x" ] ; then
  "$GS_HOME/bin/private/clone_gs_server"
  source "${GS_HOME}/bin/defGsDevKit.env"
fi

if [ -d "$GS_SERVER_STONES/$stoneName" ] ; then
  usage; exit_1_banner "Stone $stoneName already exists. Use the -o option and use a different stone name"
fi

echo "Attaching stone $stoneName"

"$GS_HOME/bin/downloadGemStone" $vers

if [ "${foreign}" = "true" ] ; then
  "$GS_HOME/bin/devKitCommandLine" createForeignStone $stoneName $vers 
else
  oldStonePath="${oldGsDevKitHome}/gemstone/stones/$stoneName"
  oldTodeRoot="${oldGsDevKitHome}/tode"
  if [ "${master_GS_HOME}" = "true" ] ; then
    oldClientDescriptionsPath="${oldGsDevKitHome}/tode/client/descriptions/${oldStoneName}"
    oldStoneHomePath="${oldGsDevKitHome}/tode/home"
    oldStoneProjectsPath=""
  fi
  if [ "${dev_GS_HOME}" = "true" ] ; then
    oldClientDescriptionsPath="${oldGsDevKitHome}/tode/sys/local/client/descriptions/${odlStoneName}"
    oldStoneHomePath="${oldGsDevKitHome}/tode/sys/stones/${oldStoneName}/home"
    oldStoneProjectsPath="${oldGsDevKitHome}/tode/sys/stones/${oldStoneName}/projects"
  fi
  cp "$oldClientDescriptionsPath" $GS_SYS_SESSIONS
  ln -s "$oldStonePath" "${GS_SERVER_STONES}/$stoneName"
  "$GS_HOME/bin/startStone" -b $stoneName
  if [ "$todeInstalled" = "true" ] ; then
    "$GS_HOME/bin/devKitCommandLine" patchTodeRoot $stoneName
    if [ "${master_GS_HOME}" = "true" ] ; then
      "$GS_HOME/bin/todeIt" $stoneName "mount \`$oldTodeRoot\` / oldTodeRoot"
    else
      "$GS_HOME/bin/todeIt" $stoneName "script --script=rebuildServerTode"
      "$GS_HOME/bin/todeIt" $stoneName "mount \`$oldTodeRoot\` / oldTodeRoot"
    fi
    cp -R "$oldStoneHomePath" "$GS_SYS_STONES/$stoneName"
    if [ "$oldStoneProjectsPath" != "" ] ; then
      cp -R "$oldStoneProjectsPath" "$GS_SYS_STONES/$stoneName"
    fi
  fi
fi

exit_0_banner "...finished"
