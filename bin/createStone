#! /usr/bin/env bash
#=========================================================================
# Copyright (c) 2014, 2015, 2016 GemTalk Systems, LLC <dhenrich@gemtalksystems.com>.
#
#   MIT license: https://github.com/GsDevKit/GsDevKit_home/blob/master/license.txt
#=========================================================================

theArgs="$*"
source ${GS_HOME}/bin/private/shFeedback
start_banner

usage() {
  cat <<HELP
USAGE: $(basename $0) [-h] [-f] [-g|-G] [-b] [-B] [-U <gemstone-user-id>] [-P <gemstone-password>]
                      [-n] [-s <snapshot-file-path>] [-t <tode-snapshot-file-path>]
		      [-u <project-entry-url>] [-i <project-name>] [-l <project-name>]
                      [-c|-C] [-z <smalltalkCI-smalltalk.ston-path>]
                      <stone-name> <gemstone-version>

Create a new stone with the given stone name.

If you create a stone from an extent snapshot, you should use the -N
option to start the stone, the first time.

If the stone already exists, creation is skipped unless the -f otion is specified,
in which case the stone and netldi are stopped and the existing stone directory removed
before creation.

With no options, tODE is installed using extent9.seaside.dbf as a startup and DataCurator 
as the default <gemstone-user-id>.

OPTIONS
  -h
     display help
  -f
     Force creation of new stone, by deleting 
     \$GS_SERVER/stones/<stone-name> directory if it exists
  -g 
     Do not install tODE in stone ... use initial extent unaltered. Default extent is extent0.seaside.dbf
     for the given GemStone version. Default <gemstone-user-id> is DataCurator.
  -G 
     Do not install tODE in stone ... use initial extent unaltered. Default extent is extent0.dbf
     for the given GemStone version. Default <gemstone-user-id> is SystemUser.
  -b
     Bootstrap GLASS into the given extent as the given user. Default extent is exten0.dbf.
  -B
     Ensure that Cypress is installed as SystemUser. Used with the -G option only.
  -n
     No startStone, no startNetldi.
  -s <snapshot-file-path> 
     Path to snapshot file used to create stone. Path may be a relative file
     path. The snapshot file may be an extent file (raw, or gzipped (.gz))
     or a backup file. If the file is compressed, it will be
     uncompressed into the target extents directory. If the file is a backup
     file, a \$GEMSTONE/bin/extent0.dbf will be copied into the target
     extents directory and then the backup will be restored without replaying 
     tranlogs.
  -t <tode-snapshot-file-path>
     path to snapshot file used to create stone. It is assumed that the snapshot
     already has tODE installed and the snapshot will be attached to the
     existing \$GS_TODE/sys/stones/<stone-name> structure.
  -u <project-entry-url>
     Download the project entry at the given url into 
     \`/sys/local/stones/<stone-name>/projects\`. Runs the tODE
     \`project entry --url=<project-entry-url>\` command.
  -i <project-name>
     Install the given project using the tODE \`project install <project-name>\`.
     tODE must already be installed via -t option.
  -l <project-name>
     Load the given project using the tODE \`project install <project-name.\`.
     tODE must already be installed via -t option.
  -z <smalltalkCI-smalltalk.ston-path>
     Customize the stone installation according to the attrbutes specified in the 
     <smalltalkCI-smalltalk.ston-path> file.
  -c
     Load the project specified in the <smalltalkCI-smalltalk.ston-path> file.
     Assume tODE is installed.
  -C
     Load the project specified in the <smalltalkCI-smalltalk.ston-path> file.
     Assume tODE is not installed.
  -U <gemstone-user-name>
     Use <gemstone-user-id> in session description. If the user does not exist in GemStone,
     then create the user after the stone has been started.
  -P <gemstone-password>
     Use <gemstone-password> as the password for the user specified in -U option. Default 
     password is swordfish. If -U not specified the -P option has no effect.

EXAMPLES
  $(basename $0) -h
  $(basename $0) -g gs_329 3.2.9
  $(basename $0) -G gs_329 3.2.9
  $(basename $0) -BG gs_329 3.2.9
  $(basename $0) gs_329 3.2.9
  $(basename $0) -f gs_329 3.2.9
  $(basename $0) -g -s \$GS_HOME/server/snapshots/extent0.tode.3.2.4.dbf gs_324 3.2.4
  $(basename $0) -BG -s \$GS_HOME/server/snapshots/extent0.tode.3.2.4.dbf gs_324 3.2.4
  $(basename $0) -t \$GS_HOME/server/snapshots/extent0.tode.3.2.4.dbf gs_324 3.2.4
  $(basename $0) -u http://gsdevkit.github.io/GsDevKit_seaside31/Seaside31.ston \
	         -t \$GS_HOME/server/snapshots/extent0.tode.3.2.4.dbf gs_324 3.2.4
  $(basename $0) -i Seaside3 \
                 -t \$GS_HOME/server/snapshots/extent0.tode.3.2.4.dbf gs_324 3.2.4
  $(basename $0) -l Seaside3 \
                 -t \$GS_HOME/server/snapshots/extent0.tode.3.2.4.dbf gs_324 3.2.4
  $(basename $0) -u http://gsdevkit.github.io/GsDevKit_seaside31/Seaside31.ston \
	         -i Seaside3 -l Seaside3 \
		 -t \$GS_HOME/server/snapshots/extent0.tode.3.2.4.dbf gs_324 3.2.4
  $(basename $0) -z \$GS_HOME/sys/local/server/templates/myStoneConfig.ston gs_329 3.2.9
  $(basename $0) -c -z \$GS_HOME/sys/local/server/templates/myStoneConfig.ston gs_329 3.2.9
  $(basename $0) -BG -z \$GS_HOME/sys/local/server/templates/myStoneConfig.ston gs_329 3.2.9
  $(basename $0) -BGC -z \$GS_HOME/sys/local/server/templates/myStoneConfig.ston gs_329 3.2.9
  $(basename $0) -b -U bozo gs_329 3.2.9
  $(basename $0) -b -U bozo -P theClown gs_329 3.2.9

HELP
}

PLATFORM="`uname -sm | tr ' ' '-'`"
if [[ "$PLATFORM" == MINGW32_NT* || "$PLATFORM" == MSYS_NT* ]] ; then
  exit_1_banner "This script is a server-only script and cannot be used on Windows "
fi

if [ "${GS_HOME}x" = "x" ] ; then
  exit_1_banner "The \$GS_HOME environment variable needs to be defined"
fi
source ${GS_HOME}/bin/defGsDevKit.env

source ${GS_HOME}/bin/private/shFunctions
verify_gsdevkit_installation

snapshotFileArg=""
noRestartArg=""
force=""
installTode="true"
todeSnapshotArg=""
entryUrl=""
installProjectName=""
loadProjectName=""
smalltalkCIConfigPath=""
loadSmalltalkCIConfig="false"
loadSmalltalkCIConfigUsingCypress="false"
bootstrapCypress="false"
bootstrapGLASS="false"
defaultExtentName="extent0.seaside.dbf"
defaultGemstoneUserId="DataCurator"
gemstonePassword="swordfish"
while getopts "fghns:t:u:i:l:z:cBCGU:P:b" OPT ; do
  case "$OPT" in
    h) usage; exit 0;;
    f) force="true";; 
    g) installTode="false";;
    G) installTode="false"; defaultExtentName="extent0.dbf"; defaultGemstoneUserId="SystemUser";;
    n) noRestartArg=" -n ";;
    s) snapshotFileArg=" -s ${OPTARG} ";;
    t) snapshotFileArg=" -s ${OPTARG} "; installTode="false"; todeSnapshotArg=" -t ";;
    u) entryUrl="${OPTARG}";;
    i) installProjectName="${OPTARG}";;
    l) loadProjectName="${OPTARG}";;
    z) smalltalkCIConfigPath="${OPTARG}";;
    c) loadSmalltalkCIConfig="true";;
    C) loadSmalltalkCIConfigUsingCypress="true";;
    B) bootstrapCypress="true";;
    b) bootstrapGLASS="true"; defaultExtentName="extent0.dbf" ;;
    U) gemstoneUserId="${OPTARG}";;
    P) gemstonePassword="${OPTARG}";;
    *) usage; exit_1_banner "Uknown option";;
  esac
done
shift $(($OPTIND - 1))

if [ $# -lt 2 ]; then
  usage; exit_1_banner "Incorrect number of positional args $# (2 expected)"
fi
stoneName="$1"
vers="$2"

if [ "${GS_SERVER}x" = "x" ] ; then
  $GS_HOME/bin/private/clone_gs_server
  source ${GS_HOME}/bin/defGsDevKit.env
fi

if [ "${GS_SYS_LOCAL}x" = "x" ] ; then
  $GS_HOME/bin/private/clone_sys_local
  source ${GS_HOME}/bin/defGsDevKit.env
fi

if [ -d $GS_SERVER_STONES/$stoneName ] ; then
  if [ "${force}x" = "x" ] ; then
    exit_1_banner "The stone $stoneName already exists. Use the -f option to force re-creation"
  else
    $GS_HOME/bin/deleteStone $stoneName
  fi
fi

if [ "${gemstoneUserId}x" = "x" ] ; then
   gemstoneUserId="$defaultGemstoneUserId"
fi

echo "Creating stone $stoneName"

$GS_HOME/bin/downloadGemStone $vers

${GS_HOME}/bin/devKitCommandLine createSmalltalkCIStoneNew $stoneName $vers $gemstoneUserId $gemstonePassword $smalltalkCIConfigPath

if [ "${snapshotFileArg}x" = "x" ] ; then
   snapshotFileArg=" -s $GS_HOME/server/stones/${stoneName}/product/bin/${defaultExtentName} "
fi

$GS_HOME/bin/newExtent $todeSnapshotArg $noRestartArg $snapshotFileArg $stoneName

if [ "${noRestartArg}x" = "x" ] ; then
  $GS_HOME/bin/startNetldi $stoneName
  ${GS_HOME}/bin/devKitCommandLine setupRuntimeSmalltalkCIStoneNew $stoneName $gemstoneUserId $gemstonePassword $smalltalkCIConfigPath
fi

if [ "$installTode" = "true" ] ; then
  if [ "$bootstrapGLASS" = "true" ] ; then
    $GS_HOME/bin/bootstrapGLASS $stoneName
  fi
  $GS_SYS/bin/todeLoad $stoneName
else
  if [ "${bootstrapCypress}" = "true" ] ; then
    if [ "$vers" != "3.4.0_e" ] ; then
      exit_1_banner "Bootstrapping Cypress is only support for GemStone 3.4.0_e"
    fi 
    stonePath=$GS_SERVER_STONES/$stoneName
    # set up stone environment
    pushd $stonePath $stonePath >& /dev/null
    source $stonePath/stone.env
    popd >& /dev/null
    export upgradeDir="$GEMSTONE/upgrade/"
    ${GS_HOME}/bin/startTopaz $stoneName -l << EOF
    iferr 1 stk
    iferr 2 stack
    iferr 3 exit 1
    set u SystemUser p swordfish
    login
#   BootStrap UUID into Base --- eventually part of 3.4.0 base
    input $GS_HOME/shared/topaz/uuid/bootstrapUUIDSupport.topaz
    commit
    input $upgradeDir/bootstrapMetacelloSupport.topaz
    commit
    run
    UserGlobals at: #Cypress_SUPPORT_REPO put: '$GS_HOME/shared/repos/CypressReferenceImplementation/cypress/'
%
    input $GS_HOME/shared/topaz/cypress/loadCypressSupport.topaz
    commit
    run
    UserGlobals removeKey: #Cypress_SUPPORT_REPO
%
    run
    UserGlobals at: #Metacello_SUPPORT_REPO put: '$GS_SHARED_REPO_METACELLO'.
    UserGlobals at: #Metacello_SUPPORT_REPO put: 'filetree:///export/foos1/users/dhenrich/dev/_home/server/stones/metacello/git/metacello-work/repository/'
%
    input $GS_HOME/shared/topaz/metacello/loadMetacelloSupport.topaz
    commit
    run
    UserGlobals removeKey: #Metacello_SUPPORT_REPO
%
    commit
    logout
    exit 0
EOF
  fi
fi

if [ "$entryUrl" != "" ] ; then
  $GS_HOME/bin/private/gsDevKitTodeCommandLine todeIt $stoneName << EOF
project entry --url=${entryUrl} /sys/stone/projects
EOF
fi

if [ "$installProjectName" != "" ] ; then
  $GS_HOME/bin/private/gsDevKitTodeCommandLine todeIt $stoneName << EOF
project install ${installProjectName}
EOF
fi

if [ "$loadProjectName" != "" ] ; then
  $GS_HOME/bin/private/gsDevKitTodeCommandLine todeIt $stoneName << EOF
project load ${loadProjectName}
EOF
fi

if [ "${loadSmalltalkCIConfig}" = "true" ] ; then
  ${GS_HOME}/bin/devKitCommandLine serverDoIt  $stoneName << EOF
  GsDeployer bulkMigrate: [
    [
      Metacello new
          baseline: 'SmalltalkCI';
          repository: '${GS_SHARED_REPO_SMALLTALKCI}';
          onConflict: [:ex | ex allow ];
          onLock: [:ex | ex disallow ];
          load ] on: Warning do: [:w | w resume ].
      (Smalltalk at: #SmalltalkCI) load: '${smalltalkCIConfigPath}'.
  ]
EOF
fi

if [ "${loadSmalltalkCIConfigUsingCypress}" = "true" ] ; then
  ${GS_HOME}/bin/startTopaz $stoneName -l << EOF
  iferr 1 stk
  iferr 2 stack
  iferr 3 exit 1
  level 1
  login
  run
    Metacello new
      baseline: 'SmalltalkCompat';
      repository: 'filetree:///export/foos1/users/dhenrich/dev/_home/shared/repos/smalltalkCompat/repository';
      load: #( 'Core' 'Tests');
      lock.
%
  commit
  run
  Metacello new
    baseline: 'SmalltalkCI';
    repository: 'gitfiletree://github.com/dalehenrich/smalltalkCI:gs_port/repository';
    load.
%
  commit
  run
  true 
    ifTrue: [ 
      "we've already loaded smalltalkCI in the above step ..."
      SmalltalkCI load: '${smalltalkCIConfigPath}' ].
  true
    ifTrue: [ "run tests until port complete"
      SmalltalkCI test: '${smalltalkCIConfigPath}' ].
%
  logout
  exit 0
EOF
fi

exit_0_banner "...finished"
