#! /usr/bin/env bash
#=========================================================================
# Copyright (C) VMware, Inc. 1986-2011.  All Rights Reserved.
# Copyright (c) 2013-2015,2016 GemTalk Systems, LLC <dhenrich@gemtalksystems.com>.
#
#   MIT license: https://github.com/GsDevKit/GsDevKit_home/blob/master/license.txt
#=========================================================================

theArgs="$*"
source "${GS_HOME}/bin/private/shFeedback"
start_banner

# help function
usage() {
 cat <<HELP
USAGE: $(basename $0) [-h] [-f] [-d <directory-name>] <gemstone-version>

Safe to run multiple times, as it will not overwrite existing data

Actions:
   Download the GemStone product zipfile
   Uncompress the GemStone zipfile into \$GS_HOME/shared/downloads/products
   Copy the initial GsDevKit repository to data directory
   Copy the gci libraries to the client smalltalk vms
   Print build version information and available IPv4 addresses

OPTIONS
  -h
     display help
  -d <directory-name>
     Download the GemStone product zipfile from the given <directory-name> on 
     the ftp site, instead of the default location.
  -f
     If a product download already exists in the \$GS_HOME/shared/downloads/products
     directory, delete the exising download and replace with the freshly downloaded
     product tree. NOTE that any stones created with a non-standard release must be 
     recreated as upgrades from the non-standard version to a release version is not 
     supported.

EXAMPLES
  $(basename $0) -h
  $(basename $0) -d 3.5.0-Alpha1 3.5.0
  $(basename $0) -f -d 3.5.0-Alpha1 3.5.0
  $(basename $0) 3.4.0

HELP
}

force=""
alternateDir=""
while getopts "hfd:" OPT ; do
  case "$OPT" in
    h) usage ; exit 0 ;;
    d) alternateDir="${OPTARG}" ;;
    f) force="true" ;;
    *) usage ; exit_1_banner "Unknown option" ;;
  esac
done
shift $(($OPTIND - 1))

if [ "$1x" = "x" ] ; then
  usage; exit_1_banner "Required positional argument missing"
fi 
vers="$1"
if [ "${GS_HOME}x" = "x" ] ; then
  exit_1_banner "the GS_HOME environment variable needs to be defined"
fi
source "${GS_HOME}/bin/defGsDevKit.env"

if [ "${alternateDir}x" = "x" ] ; then 
  bucket=$vers
  echo "Downloading GemStone/S $vers"
else
  bucket=$alternateDir
  echo "Downloading GemStone/S ($bucket) $vers"
fi

# Detect operating system
PLATFORM="`uname -sm | tr ' ' '-'`"
# Macs with Core i7 use the same software as older Macs
[ $PLATFORM = "Darwin-x86_64" ] && PLATFORM="Darwin-i386"

# Check we're on a suitable 64-bit machine and set gsvers
case "$PLATFORM" in
    Darwin-i386)
      dlvers="GemStone64Bit${bucket}-i386.Darwin"
      gsvers="GemStone64Bit${vers}-i386.Darwin"
      ;;
    Linux-x86_64)
      # Linux looks OK
      dlvers="GemStone64Bit${bucket}-x86_64.Linux"
      gsvers="GemStone64Bit${vers}-x86_64.Linux"
      ;;
    MSYS_NT*|MINGW32_NT*|MINGW64_NT*)
      if  [ "$vers" \< "3.3.0"  ] ;  then 
          gsvers="GemBuilderC${vers}-x86.Windows_NT"
          dlvers="$gsvers"
      else
          gsvers="GemStone64BitClient${vers}-x86.Windows_NT"
          dlvers="$gsvers"
      fi
      ;;
    *)
      exit_1_banner "This script should only be run on Mac (Darwin-i386), Linux (Linux-x86_64) or Windows (Windows-x86_NT). The result from \"uname -sm\" is \"`uname -sm`\""
      ;;
esac

# set zipfile name from gsvers
dl_gss_file=${dlvers}.zip
gss_file=${gsvers}.zip

# set ftp_address
ftp_address=https://downloads.gemtalksystems.com

# Check that the current directory is writable
if [ ! -w "." ]
    then
    /bin/ls -ld "`pwd`"
    exit_1_banner "This script requires write permission on your current directory."
fi

# We're good to go. Let user know.
machine_name="`uname -n`"

if [ -d "$GS_SHARED_DOWNLOADS/products/$gsvers" ] ; then
  if [ "${force}" = "true" ] ; then
    chmod -R +w "$GS_SHARED_DOWNLOADS//products/$gsvers"
    rm -rf "$GS_SHARED_DOWNLOADS/products/$gsvers"
  else
    exit_0_banner "$GS_SHARED_DOWNLOADS//products/$gsvers already exists to replace it, remove or rename it and rerun this script"
  fi
fi

# Look for either wget to download GemStone
if [ -e "`which wget`" ]; then
    cmd="`which wget` --no-verbose"
else
  if [ -e "`which curl`" ]; then
      cmd="`which curl` -O -s -S"
  else
    exit_1_banner "wget or curl is not available. Install wget or curl and rerun this script."
  fi
fi

# Download GemStone
pushd "$GS_SHARED_DOWNLOADS/zip" >& /dev/null
  echo "[Info] Starting download of $dl_gss_file for GemStone $gsverson $machine_name"
  if [ ! -e $dl_gss_file ]; then
    echo "[Info] Downloading ${ftp_address}/pub/GemStone64/$bucket/$dl_gss_file using ${cmd}"
    $cmd ${ftp_address}/pub/GemStone64/$bucket/$dl_gss_file
  else
    echo "[Info] $dl_gss_file already exists"
    echo "to replace it, remove or rename it and rerun this script"
  fi

  # Unzip the downloaded archive into $GS_HOME/shared/downloads/products/
  echo "[Info] Uncompressing GemStone archive into $GS_HOME/shared/downloads/products/"
  gs_product="$GS_SHARED_DOWNLOADS/products/$gsvers"
  if [ ! -e "$gs_product" ]
    then
    unzip -q -d "$GS_SHARED_DOWNLOADS/products" $dl_gss_file
    if [ ! -e "$gs_product" ] ; then
      ln -s "$GS_SHARED_DOWNLOADS/products/${dlvers}" "${gs_product}"
    fi
  else
    echo "[Warning] $GS_SHARED_DOWNLOADS/products/$gsvers already exists"
    echo "to replace it, remove or rename it and rerun this script"
  fi
popd >& /dev/null


case "$PLATFORM" in
  MSYS_NT*|MINGW32_NT*|MINGW64_NT*) #do nothing
    ;;
  *)
    # Copy initial system.conf into the Seaside data directory
    echo "[Info] Copying initial system.conf to data directory"
    if [ ! -e "$gs_product/seaside/data/system.conf" ]
      then
      cp "$gs_product/seaside/system.conf" \
         "$gs_product/seaside/data"
      chmod 644 "$gs_product/seaside/data/system.conf"
    else
      echo "[Warning] $gs_product/seaside/data/system.conf already exists"
      echo "to replace it, remove or rename it and rerun this script"
    fi

    # Copy an initial extent to the Seaside data directory
    echo "[Info] Copying initial Seaside repository to data directory"
    if [ ! -e "$gs_product/seaside/data/extent0.dbf" ]
      then
      cp "$gs_product/bin/extent0.seaside.dbf" \
         "$gs_product/seaside/data/extent0.dbf"
      chmod 644 "$gs_product/seaside/data/extent0.dbf"
    else
      echo "[Warning] $gs_product/seaside/data/extent0.dbf already exists"
      echo "to replace it, remove or rename it and rerun this script"
    fi
    ;;
esac

#    Copy the gci libraries to client installations
if [ "${force}x" = "x" ] ; then
  "$GS_HOME/bin/private/installClientGciLibraries" $vers
else
  "$GS_HOME/bin/private/installClientGciLibraries" -f $vers
fi


echo "[Info] Finished $gsvers download on $machine_name"
echo ""
echo "[Info] GemStone version information:"
cat "$gs_product/version.txt"

if [ "${GS_TRAVIS}x" != "x" ] ; then
  case "$PLATFORM" in
    Linux-x86_64)
      # running on travis server - have to use a custom key file
      case "$vers" in
        2.4.*) keyName="GemStone64Bit2.4.0-x86_64.Linux.key" ;;
        3.0.1) keyName="GemStone64Bit3.0.0-x86_64.Linux.key" ;;
        3.1.*) keyName="GemStone64Bit3.1.0-x86_64.Linux.key" ;;
        3.2.*) keyName="GemStone64Bit3.2.0-x86_64.Linux.key" ;;
        3.2.*) keyName="GemStone64Bit3.2.0-x86_64.Linux.key" ;;
        3.3.*) keyName="GemStone64Bit3.3.0-x86_64.Linux.key" ;;
        3.4.*) keyName="GemStone64Bit3.4.0-x86_64.Linux.key" ;;
        3.5.*|3.6.*)  ;; # see if key needed for 3.5.0
        *) exit_1_banner "No travis license for GemStone $vers";;
      esac
      if [ "${keyName}x" != "x" ] ; then
        chmod +w  "$gs_product/seaside/etc/gemstone.key"
        echo "Copying $GS_HOME/travis/$keyName to $gs_product/seaside/etc/gemstone.key"
        cp "$GS_HOME/travis/$keyName" "$gs_product/seaside/etc/gemstone.key"
      fi
      ;;
   *)
     # no need for special handling 
     ;;
   esac
fi

# End of script
exit_0_banner "...finished"
