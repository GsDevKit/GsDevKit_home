#! /usr/bin/env bash
#=========================================================================
# Copyright (c) 2015, 2016 GemTalk Systems, LLC <dhenrich@gemtalksystems.com>.
#
#   MIT license: https://github.com/GsDevKit/GsDevKit_home/blob/master/license.txt
#=========================================================================

theArgs="$*"
source ${GS_HOME}/bin/private/shFeedback
start_banner

usage() {
  cat <<HELP
USAGE: $(basename $0) [-h] [-c https | ssh ] [-b <branch-name>] client|server|both

Clone the Github repositories used by the tODE client and server into 
\$GS_HOME/shared/repos.

"client" & "server" repos:

  - github://dalehenrich/metacello-work:\${GS_SHARED_COMMIT_METACELLO}/repository
  - github://dalehenrich/tode:\${GS_SHARED_COMMIT_TODE}/repository
  - github://GsDevKit/ston:\${GS_SHARED_COMMIT_STON}/repository

"client" repos:

  - github://dalehenrich/filetree:\${GS_SHARED_COMMIT_PHARO3_FILETREE}/repository

"server" repos:

  - github://dalehenrich/filetree:\${GS_SHARED_COMMIT_GEMSTONE_FILETREE}/repository
  - github://GsDevKit/Grease:\${GS_SHARED_COMMIT_GREASE}/repository
  - github://glassdb/PharoCompatibility:\${GS_SHARED_COMMIT_OHARO_COMPAT}/repository
  - github://glassdb/glass:\${GS_SHARED_COMMIT_GLASS1}/repository
  - github://dalehenrich/rb:\${GS_SHARED_COMMIT_RB}/repository
  - github://GsDevKit/zinc:\${GS_SHARED_COMMIT_ZINC}/repository


If you clone these repositoris into  \$GS_HOME/shared/repos, then they will be 
used for creating pharo images and bootstrapping tODE into stones. 

The following env vars are defined:

  \$GS_SHARED_REPO_METACELLO
  \$GS_SHARED_REPO_TODE
  \$GS_SHARED_REPO_PHARO3_FILETREE
  \$GS_SHARED_REPO_GEMSTONE_FILETREE
  \$GS_SHARED_REPO_STON
  \$GS_SHARED_REPO_GREASE
  \$GS_SHARED_REPO_PHARO_COMPAT
  \$GS_SHARED_REPO_GLASS1
  \$GS_SHARED_REPO_RB
  \$GS_SHARED_REPO_ZINC
  \$GS_SHARED_REPO_SMALLTALKCI

  \$GS_SHARED_GITHUB_COMMIT_METACELLO
  \$GS_SHARED_GITHUB_COMMIT_TODE
  \$GS_SHARED_GITHUB_COMMIT_STON
  \$GS_SHARED_GITHUB_COMMIT_PHARO3_FILETREE
  \$GS_SHARED_GITHUB_COMMIT_GEMSTONE_FILETREE
  \$GS_SHARED_GITHUB_COMMIT_GREASE
  \$GS_SHARED_GITHUB_COMMIT_PHARO_COMPAT
  \$GS_SHARED_GITHUB_COMMIT_GLASS1
  \$GS_SHARED_GITHUB_COMMIT_RB
  \$GS_SHARED_GITHUB_COMMIT_ZINC
  \$GS_SHARED_GITHUB_COMMIT_SMALLTALKCI

  \$GS_SHARED_GIT_CHECKOUT_METACELLO
  \$GS_SHARED_GIT_CHECKOUT_TODE
  \$GS_SHARED_GIT_CHECKOUT_STON
  \$GS_SHARED_GIT_CHECKOUT_PHARO3_FILETREE
  \$GS_SHARED_GIT_CHECKOUT_GEMSTONE_FILETREE
  \$GS_SHARED_GIT_CHECKOUT_GREASE
  \$GS_SHARED_GIT_CHECKOUT_PHARO_COMPAT
  \$GS_SHARED_GIT_CHECKOUT_GLASS1
  \$GS_SHARED_GIT_CHECKOUT_RB
  \$GS_SHARED_GIT_CHECKOUT_ZINC
  \$GS_SHARED_GIT_CHECKOUT_SMALLTALKCI

If the repositories have not been cloned, the the env var points to the github repo.

OPTIONS
  -h
     display help
  -b <branch-name>
     The name of the branch to create for local use, isolating your changes 
     from the primary (master) branch. If not specified, then primary branch
     is used.
  -c https | ssh
     clone using https (https://github.com) or ssh (git@github.com)
     "ssh" is the default 

EXAMPLES
   $(basename $0) -h
   $(basename $0) client
   $(basename $0) -c ssh server
   $(basename $0) -c https both

HELP
}

if [ "${GS_HOME}x" = "x" ] ; then
  exit_1_banner "the GS_HOME environment variable needs to be defined"
fi
source ${GS_HOME}/bin/defGsDevKit.env

modeArg=""
branchName=""
while getopts "hnb:c:" OPT ; do
  case "$OPT" in
    h) usage; exit 0;;
    b) branchName="${OPTARG}";;
    c) modeArg=" -c ${OPTARG} ";;
    *) usage; exit_1_banner "Uknown option";;
  esac
done
shift $(($OPTIND - 1))

if [ $# -lt 1 ]; then
  usage; exit_1_banner "missing required argument"
fi

loadClientRepos="false"
loadServerRepos="false"
case "$1" in
  client) loadClientRepos="true";;
  server) loadServerRepos="true";;
  both) loadClientRepos="true"; loadServerRepos="true" ;;
  *) usage; exit_1_banner "unknown argument: $1";;
esac

source ${GS_HOME}/bin/private/gitFunctions

pushd ${GS_SHARED_REPO} >& /dev/null
  if [ ! -d "metacello-work" ] ; then
    ${GS_HOME}/bin/private/cloneGitHubProject -b $GS_SHARED_GIT_CHECKOUT_METACELLO -n $modeArg dalehenrich metacello-work
    checkoutClone $GS_SHARED_GIT_CHECKOUT_METACELLO ${GS_SHARED_REPO}/metacello-work $branchName
  fi
  if [ ! -d "tode" ] ; then
    ${GS_HOME}/bin/private/cloneGitHubProject -b $GS_SHARED_GIT_CHECKOUT_TODE -n $modeArg dalehenrich tode
    checkoutClone $GS_SHARED_GIT_CHECKOUT_TODE ${GS_SHARED_REPO}/tode $branchName
  fi
  if [ ! -d "ston" ] ; then
    ${GS_HOME}/bin/private/cloneGitHubProject -b $GS_SHARED_GIT_CHECKOUT_STON -n $modeArg GsDevKit ston
    checkoutClone $GS_SHARED_GIT_CHECKOUT_STON ${GS_SHARED_REPO}/ston $branchName
  fi
  if [ "$loadClientRepos" = "true" ] ; then
    cd pharo3.0
    if [ ! -d "filetree" ] ; then
      ${GS_HOME}/bin/private/cloneGitHubProject -b $GS_SHARED_GIT_CHECKOUT_PHARO3_FILETREE -n $modeArg dalehenrich filetree
      checkoutClone $GS_SHARED_GIT_CHECKOUT_PHARO3_FILETREE ${GS_SHARED_REPO}/pharo3.0/filetree $branchName
      fi
    cd ..
  fi
  if [ "$loadServerRepos" = "true" ] ; then
    if [ ! -d "filetree" ] ; then
      ${GS_HOME}/bin/private/cloneGitHubProject -b $GS_SHARED_GIT_CHECKOUT_GEMSTONE_FILETREE -n $modeArg dalehenrich filetree
      checkoutClone $GS_SHARED_GIT_CHECKOUT_GEMSTONE_FILETREE ${GS_SHARED_REPO}/filetree $branchName
    fi
    if [ ! -d "Grease" ] ; then
      ${GS_HOME}/bin/private/cloneGitHubProject -b $GS_SHARED_GIT_CHECKOUT_GREASE -n $modeArg GsDevKit Grease
      checkoutClone $GS_SHARED_GIT_CHECKOUT_GREASE ${GS_SHARED_REPO}/Grease $branchName
    fi
    if [ ! -d "PharoCompatibility" ] ; then
      ${GS_HOME}/bin/private/cloneGitHubProject -b $GS_SHARED_GIT_CHECKOUT_PHARO_COMPAT -n $modeArg glassdb PharoCompatibility
      checkoutClone $GS_SHARED_GIT_CHECKOUT_PHARO_COMPAT ${GS_SHARED_REPO}/PharoCompatibility $branchName
    fi
    if [ ! -d "glass" ] ; then
      ${GS_HOME}/bin/private/cloneGitHubProject -b $GS_SHARED_GIT_CHECKOUT_GLASS1 -n $modeArg glassdb glass
      checkoutClone $GS_SHARED_GIT_CHECKOUT_GLASS1 ${GS_SHARED_REPO}/glass $branchName
    fi
    if [ ! -d "rb" ] ; then
      ${GS_HOME}/bin/private/cloneGitHubProject -b $GS_SHARED_GIT_CHECKOUT_RB -n $modeArg dalehenrich rb
      checkoutClone $GS_SHARED_GIT_CHECKOUT_RB ${GS_SHARED_REPO}/rb $branchName
    fi
    if [ ! -d "zinc" ] ; then
      ${GS_HOME}/bin/private/cloneGitHubProject -b $GS_SHARED_GIT_CHECKOUT_ZINC -n $modeArg GsDevKit zinc
      checkoutClone $GS_SHARED_GIT_CHECKOUT_ZINC ${GS_SHARED_REPO}/zinc $branchName
    fi
    if [ ! -d "smalltalkCI" ] ; then
      ${GS_HOME}/bin/private/cloneGitHubProject -n $modeArg hpi-swa smalltalkCI
      checkoutClone $GS_SHARED_GIT_CHECKOUT_SMALLTALKCI ${GS_SHARED_REPO}/smalltalkCI $branchName
    fi
  fi
popd >& /dev/null

exit_0_banner "...finished"
