#! /usr/bin/env bash
#=========================================================================
# Copyright (c) 2015, 2016 GemTalk Systems, LLC <dhenrich@gemtalksystems.com>.
#
#   MIT license: https://github.com/GsDevKit/GsDevKit_home/blob/master/license.txt
#=========================================================================

theArgs="$*"
source "${GS_HOME}/bin/private/shFeedback"
start_banner

usage() {
  cat <<HELP
USAGE: $(basename $0) [-h] client|server|both

Update the Github repositories used by the GsDevKit client and servers in \$GS_HOME/shared/repos.

"client" & "server" repos:

  - github://dalehenrich/metacello-work:\${GS_SHARED_COMMIT_METACELLO}/repository
  - github://dalehenrich/tode:\${GS_SHARED_COMMIT_TODE}/repository
  - github://GsDevKit/ston:\${GS_SHARED_COMMIT_STON}/repository
  - github://hpi-swa/smalltalkCI:\${GS_SHARED_COMMIT_SMALLTALKCI}/repository

"client" repos:

  - github://dalehenrich/filetree:\${GS_SHARED_COMMIT_PHARO3_FILETREE}/repository

"server" repos:

  - github://dalehenrich/filetree:\${GS_SHARED_COMMIT_GEMSTONE_FILETREE}/repository
  - github://GsDevKit/Grease:\${GS_SHARED_COMMIT_GREASE}/repository
  - github://glassdb/PharoCompatibility:\${GS_SHARED_COMMIT_OHARO_COMPAT}/repository
  - github://glassdb/glass:\${GS_SHARED_COMMIT_GLASS1}/repository
  - github://dalehenrich/rb:\${GS_SHARED_COMMIT_RB}/repository
  - github://GsDevKit/zinc:\${GS_SHARED_COMMIT_ZINC}/repository
  - github://GsDevKit/zodiac:\${GS_SHARED_COMMIT_ZODIAC}/repository

OPTIONS
  -h
     display help

EXAMPLES
   $(basename $0) -h
   $(basename $0) client
   $(basename $0) -c ssh server
   $(basename $0) -c https both

HELP
}

if [ "${GS_HOME}x" = "x" ] ; then
  exit_1_banner "the GS_HOME environment variable needs to be defined"
fi
source "${GS_HOME}/bin/defGsDevKit.env"

modeArg=""
while getopts "hnb:c:" OPT ; do
  case "$OPT" in
    h) usage; exit 0;;
    c) modeArg=" -c ${OPTARG} ";;
    *) usage; exit_1_banner "Uknown option";;
  esac
done
shift $(($OPTIND - 1))

if [ $# -lt 1 ]; then
  usage; exit_1_banner "missing required argument"
fi

updateClientRepos="false"
updateServerRepos="false"
case "$1" in
  client) updateClientRepos="true";;
  server) updateServerRepos="true";;
  both) updateClientRepos="true"; updateServerRepos="true" ;;
  *) usage; exit_1_banner "unknown argument: $1";;
esac

source ${GS_HOME}/bin/private/gitFunctions

pushd ${GS_SHARED_REPO} >& /dev/null
  if [ -d "metacello-work" ] ; then
    updateClone "$GS_SHARED_GIT_CHECKOUT_METACELLO" "$GS_SHARED_GIT_REMOTE_METACELLO" "${GS_SHARED_REPO}/metacello-work"
  fi
  if [ -d "tode" ] ; then
    updateClone "$GS_SHARED_GIT_CHECKOUT_TODE" "$GS_SHARED_GIT_REMOTE_TODE" "${GS_SHARED_REPO}/tode"
  fi
  if [ -d "ston" ] ; then
    updateClone "$GS_SHARED_GIT_CHECKOUT_STON" "$GS_SHARED_GIT_REMOTE_STON" "${GS_SHARED_REPO}/ston"
  fi
  if [ -d "smalltalkCI" ] ; then
    updateClone "$GS_SHARED_GIT_CHECKOUT_SMALLTALKCI" "$GS_SHARED_GIT_REMOTE_SMALLTALKCI" "${GS_SHARED_REPO}/smalltalkCI"
  fi
  if [ "$updateClientRepos" = "true" ] ; then
    cd pharo3.0
    if [ -d "filetree" ] ; then
      updateClone "$GS_SHARED_GIT_CHECKOUT_PHARO3_FILETREE" "$GS_SHARED_GIT_REMOTE_PHARO3_FILETREE" "${GS_SHARED_REPO}/pharo3.0/filetree"
    fi
    cd ..
  fi
  if [ "$updateServerRepos" = "true" ] ; then
    if [ -d "filetree" ] ; then
      updateClone "$GS_SHARED_GIT_CHECKOUT_GEMSTONE_FILETREE" "$GS_SHARED_GIT_REMOTE_GEMSTONE_FILETREE" "${GS_SHARED_REPO}/filetree"
    fi
    if [ -d "Grease" ] ; then
      updateClone "$GS_SHARED_GIT_CHECKOUT_GREASE" "$GS_SHARED_GIT_REMOTE_GREASE" "${GS_SHARED_REPO}/Grease"
    fi
    if [ -d "PharoCompatibility" ] ; then
      updateClone "$GS_SHARED_GIT_CHECKOUT_PHARO_COMPAT" "$GS_SHARED_GIT_REMOTE_PHARO_COMPAT" "${GS_SHARED_REPO}/PharoCompatibility"
    fi
    if [ -d "glass" ] ; then
      updateClone "$GS_SHARED_GIT_CHECKOUT_GLASS1" "$GS_SHARED_GIT_REMOTE_GLASS1" "${GS_SHARED_REPO}/glass"
    fi
    if [ -d "rb" ] ; then
      updateClone "$GS_SHARED_GIT_CHECKOUT_RB" "$GS_SHARED_GIT_REMOTE_RB" "${GS_SHARED_REPO}/rb"
    fi
    if [ -d "zinc" ] ; then
      updateClone "$GS_SHARED_GIT_CHECKOUT_ZINC" "$GS_SHARED_GIT_REMOTE_ZINC" "${GS_SHARED_REPO}/zinc"
    fi
    if [ -d "zodiac" ] ; then
      updateClone "$GS_SHARED_GIT_CHECKOUT_ZODIAC" "$GS_SHARED_GIT_REMOTE_ZODIAC" "${GS_SHARED_REPO}/zodiac"
    fi

  fi
popd >& /dev/null

exit_0_banner "...finished"
